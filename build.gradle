buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        jcenter()
    }
    
    dependencies {
        classpath group: 'cz.kubacki.gradle.plugins', name: 'gradle-nbm-plugin', version: '1.17.0', {
            // Workaround for bad transitive dependencies
            exclude group:'org.slf4j', module:'slf4j-simple'
            exclude group:'org.gradle', module:'gradle-tooling-api' // was version 2.7 
        }
        classpath group: 'gradle.plugin.com.github.spotbugs', name: 'gradlePlugin', version: '1.6.0'
        gradleApi()
    }
}

apply plugin: 'build-dashboard'

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    
    group = 'org.tweetwallfx'
    version = '1.0'
    
    repositories {
        jcenter()
    }
    
    dependencies {
        testCompile group: 'junit', name: 'junit', version: versionJUnit
    }
    
    jar {
        manifest.attributes provider: 'gradle'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:all'
        options.compilerArgs << '-Werror'
        options.compilerArgs << '-proc:none'
    }
    
    spotbugs {
        ignoreFailures = false
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        
        // Workaround to bug https://github.com/spotbugs/spotbugs/issues/440
        def sourceSetName = (name - 'spotbugs').uncapitalize()
        dependsOn( sourceSets[sourceSetName].classesTaskName)
            
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
    
    tasks.withType(JavaExec) {
        jvmArgs '-XX:+IgnoreUnrecognizedVMOptions'
        jvmArgs '--add-modules java.xml.bind'
    }
}

description = 'TweetWallFX'

task createFolders(description: 'Creates the folders for the projects and sourceSets should they not exist.') doLast {
    rootProject.allprojects.each {p ->
        if (!p.getProjectDir().isDirectory()) {
            println 'Creating project folder: ' + p.getProjectDir()
            p.getProjectDir().mkdirs()
        }
        
        if (p.hasProperty('sourceSets')) {
            p.sourceSets*.allSource*.srcDirs*.each { File srcDir ->
                if (!srcDir.isDirectory()) {
                    println 'Creating source folder: ' + srcDir
                    srcDir.mkdirs()
                }
            }
        }
    }
}

task ('runDevoxx', dependsOn: ':TweetWallFX-Devoxx:run')
task ('runDevoxx2015', dependsOn: ':TweetWallFX-Devoxx-2015:run')
task ('runDevoxx2017US', dependsOn: ':TweetWallFX-Devoxx-2017-US:run')
task ('runDevoxx2017FR', dependsOn: ':TweetWallFX-Devoxx-2017-FR:run')
task ('runDevoxx2017BE-Exhibition', dependsOn: ':TweetWallFX-Devoxx-2017-BE:Exhibition:run')
task ('runJavaOne', dependsOn: ':TweetWallFX-JavaOne:run')
task ('runNetBeans', dependsOn: ':TweetWallFX-NetBeans:run')
